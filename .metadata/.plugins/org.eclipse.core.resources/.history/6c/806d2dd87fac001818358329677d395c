import java.util.Iterator;
import java.util.NoSuchElementException;

public class Deque<I> implements Iterable<I> {

  private Node head;
  private Node tail;
  private int size;

  public Deque() {
    // Attributes will be defaulted to get empty deque
  }

  public boolean isEmpty() {
    return size == 0;
  }

  public int size() {
    return size;
  }

  public void addFirst(I item) {
    Node node = new Node(item);
    if (size == 0) {
      head = node;
      tail = node;
    }
    node.next = head;
    head = node;
    size++;
  }

  public void addLast(I item) {
    Node node = new Node(item);
    if (size == 0) {
      head = node;
      tail = node;
    }
    node.prev = tail;
    tail = node;
    size++;
  }

  public I removeFirst() {
    if(size == 0) {
      throw new NoSuchElementException("Underflow");
    }
    I item = head.item;
    head = head.next;
    return item;
  }

  public I removeLast() {
    if(size == 0) {
      throw new NoSuchElementException("Underflow");
    }
    I item = tail.item;
    tail = tail.prev;
    return item;
  }

  @Override
  public Iterator<I> iterator() {
    // return an iterator over items in order from front to end
  }

  private class Node {
    private I item;
    private Node prev;
    private Node next;

    private Node(I item) {
      this.item = item;
    }
  }

  public static void main(String[] args) {
    // unit testing (optional)
  }

}
