import edu.princeton.cs.algs4.UF;

public class Percolation {

  private static final String ILLEGAL_ARGUMENTS_MESSAGE = "Index out of bounds";
  private UF unionfind;
  private boolean[] opened;
  private int openSites;
  private int size;

  public Percolation(int n) {
    int bottom = n * n + 1;
    unionfind = new UF(bottom + 1);
    opened = new boolean[bottom];
    for (int i = 1; i <= n; i++) {
      unionfind.union(0, i);
      unionfind.union(bottom - i, bottom);
    }
    size = n;
  }

  public void open(int row, int col) {
    if (!isIndexValid(row, col)) {
      throw new IllegalArgumentException(ILLEGAL_ARGUMENTS_MESSAGE);
    }
    if(isOpen(row, col)) {
      return;
    }
    opened[get1dIndex(row, col)] = true;
    openSites++;
    int rowUp = row - 1;
    int rowDown = row + 1;
    int colLeft = col - 1;
    int colRight = col + 1;
    if (isIndexValid(rowUp, col) && isOpen(rowUp, col)) {
      unionfind.union(get1dIndex(row, col), get1dIndex(rowUp, col));
    }
    if (isIndexValid(rowDown, col) && isOpen(rowDown, col)) {
      unionfind.union(get1dIndex(row, col), get1dIndex(rowDown, col));
    }
    if (isIndexValid(row, colLeft) && isOpen(row, colLeft)) {
      unionfind.union(get1dIndex(row, col), get1dIndex(row, colLeft));
    }
    if (isIndexValid(row, colRight) && isOpen(row, colRight)) {
      unionfind.union(get1dIndex(row, col), get1dIndex(row, colRight));
    }
  }

  public boolean isOpen(int row, int col) {
    if (!isIndexValid(row, col)) {
      throw new IllegalArgumentException(ILLEGAL_ARGUMENTS_MESSAGE);
    }
    return opened[get1dIndex(row, col)];
  }

  public boolean isFull(int row, int col) {
    if (!isIndexValid(row, col)) {
      throw new IllegalArgumentException(ILLEGAL_ARGUMENTS_MESSAGE);
    }
    return unionfind.connected(0, get1dIndex(row, col));
  }

  public int numberOfOpenSites() {
    return openSites;
  }

  public boolean percolates() {
    return unionfind.connected(0, size * size + 1);
  }

  private int get1dIndex(int row, int col) {
    return (row - 1) * size + col;
  }

  private boolean isIndexValid(int row, int col) {
    return (row < 1 || row > size || col < 1 || col > size);
  }

  public static void main(String[] args) {}
}
