import java.util.Iterator;
import java.util.NoSuchElementException;
import edu.princeton.cs.algs4.StdRandom;

public class RandomizedQueue<I> implements Iterable<I> {

  private I[] queue;
  private int size;

  public RandomizedQueue() {
    queue = (I[]) new Object[1];
  }

  public boolean isEmpty() {
    return size == 0;
  }

  public int size() {
    return size;
  }

  public void enqueue(I item) {
    if(item == null) {
      throw new IllegalArgumentException();
    }
    if (queue.length == size) {
      resize(2*size);
    }
    queue[++size] = item;
  }

  public I dequeue() {
    if(isEmpty()) {
      throw new NoSuchElementException();
    }
    int rand = StdRandom.uniform(size);
    if(rand == size-1) {
      I item = queue[rand];
      queue[--size] = null;
      return item;
    } else {
      I item = queue[rand];
      queue[rand] = queue[--size];
      queue[size] = null;
      return item;
    }
  }

  public I sample() {
    return queue[StdRandom.uniform(size)];
  }

  private void resize(int length) {
    if (length < size) {
      throw new IllegalArgumentException();
    }
    I[] newQueue = (I[]) new Object[length];
    for (int i = 0; i < size; i++) {
      newQueue[i] = queue[i];
    }
    queue = newQueue;
  }

  public Iterator<I> iterator() {
    return new RandomIterator();
  }
  
  private class RandomIterator implements Iterator<I> {

    private I[] items;
    private int n;
    
    private RandomIterator() {
      n=size;
      items = (I[]) new Object[n];
      for(int i = 0; i<n;i++) {
        items[i]=queue[i];
      }
    }
    
    public boolean hasNext() {
      // TODO Auto-generated method stub
      return false;
    }

    public I next() {
      // TODO Auto-generated method stub
      return null;
    }
  }

  public static void main(String[] args) {
    // unit testing (optional)
  }

}
